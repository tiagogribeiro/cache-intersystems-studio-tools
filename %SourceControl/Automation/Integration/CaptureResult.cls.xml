<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%SourceControl.Automation.Integration.CaptureResult">
<Description>
Capture results of your testing, results view in portal unit test in portal administrion Cach√©</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>64408,30730.655183</TimeCreated>

<Parameter name="NAMEuSUITE">
<Default>(root)</Default>
</Parameter>

<Parameter name="PORT">
<Default>57772</Default>
</Parameter>

<Property name="listResults">
<Type>%ArrayOfDataTypes</Type>
<Private>1</Private>
</Property>

<Property name="totalization">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="getStatusAllSuites">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ##class(%UnitTest.Report).GetTestStatus( $ZNSPACE,..getLastId() )=1
]]></Implementation>
</Method>

<Method name="getLastId">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[    quit $get(^UnitTest.Result)
]]></Implementation>
</Method>

<Method name="colectorListAllClassTested">
<ReturnType>%SourceControl.Automation.Integration.CaptureResult</ReturnType>
<Implementation><![CDATA[
    #dim listBuildTime As %String
    #dim id = ..getLastId()
    #dim index = ""
    set ..listResults = ##class(%ArrayOfDataTypes).%New()
    for {
        set index = $order(^UnitTest.Result(id,..#NAMEuSUITE,index),1,listBuildTime)
        quit:(index="")
        
        do ..listResults.SetAt( $listGet(listBuildTime,2), index )
    }
    quit ##this
]]></Implementation>
</Method>

<Method name="colectorListClassTestedWidthError">
<ReturnType>%SourceControl.Automation.Integration.CaptureResult</ReturnType>
<Implementation><![CDATA[
    #dim listBuildTime As %String
    #dim id = ..getLastId()
    #dim index = ""
    set ..listResults = ##class(%ArrayOfDataTypes).%New()
    for {
        set index = $order(^UnitTest.Result(id,..#NAMEuSUITE,index),1,listBuildTime)
        quit:(index="")
        
        if ( $listGet(listBuildTime,1) = 0 ){
            do ..listResults.SetAt( $listGet(listBuildTime,2), index )
        }
    }
    quit ##this
]]></Implementation>
</Method>

<Method name="colectorListClassTestedWidthSuccess">
<ReturnType>%SourceControl.Automation.Integration.CaptureResult</ReturnType>
<Implementation><![CDATA[
    #dim listBuildTime As %String
    #dim id = ..getLastId()
    #dim index = ""
    set ..listResults = ##class(%ArrayOfDataTypes).%New()
    for {
        set index = $order(^UnitTest.Result(id,..#NAMEuSUITE,index),1,listBuildTime)
        quit:(index="")
        
        if ( $listGet(listBuildTime,1) = 1 ){
            do ..listResults.SetAt( $listGet(listBuildTime,2), index )
        }
    }
    quit ##this
]]></Implementation>
</Method>

<Method name="colectorResultClassTestedWidthSuccessAndErrors">
<ReturnType>%SourceControl.Automation.Integration.CaptureResult</ReturnType>
<Implementation><![CDATA[
    #dim listBuildTime As %String
    #dim id = ..getLastId()
    #dim index = ""
    #dim success,errors As %Integer = 0
    set ..listResults = ##class(%ArrayOfDataTypes).%New()
    for {
        set index = $order(^UnitTest.Result(id,..#NAMEuSUITE,index),1,listBuildTime)
        quit:(index="")
        
        if ( $listGet(listBuildTime,1) = 0 ){
            set errors = $increment(errors)
        } else {
            set success = $increment(success)
        }
    }
    set ..totalization = $$$FormatText($$$Text("@ExecutadoComSucessoEErros@%1 executado(s) com sucesso e %2 com erro(s).","%Studio.Tools"), success, errors )
    quit ##this
]]></Implementation>
</Method>

<Method name="getTimeAll">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[     quit $listGet(^UnitTest.Result(..getLastId(),..#NAMEuSUITE),2)
]]></Implementation>
</Method>

<Method name="getResult">
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[    quit ..listResults
]]></Implementation>
</Method>

<Method name="getListInLine">
<FormalSpec>limit:%Integer=20</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim inline As %String = ""
    #dim index As %Integer
    #dim separator,data As %String
    #dim count As %Integer
    for count=1:1 {        
        set data = ..listResults.GetNext(.index)
        quit:(index="")
        
        #dim text = index_" - time: "_data        
        set separator = $select(inline="":"",1:"\n")
        
        if (count = limit){
            set text = $$$Text("@Mais@mais", "%Studio.Tools")
            set inline = inline_separator_text
            quit
        }
        
        set inline = inline_separator_"- "_text
    }
    quit inline
]]></Implementation>
</Method>

<Method name="getTotalization">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..totalization
]]></Implementation>
</Method>

<Method name="getLink">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set s = ##class(%RoutineMgr).GetWebServerPort(.p, .h, .up, .url)
    if $E(url,$L(url))="/" {
        set url=$E(url,1,$L(url)-1)
    }
    If ($$$ISERR(s)) || ($G(url)="") Set url = "http://127.0.0.1:57772"
    set url=url_$$getDefaultApp^%SYS.cspServer2($ZU(5))   
    
    #dim url=url_"/%25UnitTest.Portal.Indices.cls?Index="_..getLastId()    
    quit url
]]></Implementation>
</Method>
</Class>
</Export>
