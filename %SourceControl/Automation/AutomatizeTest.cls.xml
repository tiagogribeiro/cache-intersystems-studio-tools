<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%SourceControl.Automation.AutomatizeTest">
<Import>%SourceControl.Automation.Test</Import>
<Super>%RegisteredObject,%SourceControl.Automation.AutomatizeStorage</Super>
<TimeCreated>64261,63233.601792</TimeCreated>

<Parameter name="FILEuTESTABLE">
<Expression>$listBuild("cls")</Expression>
</Parameter>

<Parameter name="PACKAGEuTEST">
<Default>test</Default>
</Parameter>

<Property name="classNameTest">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="classNameComplete">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="className">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="package">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="packageTest">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="packageReplace">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Parameter name="DIRECTIONuFINDuRIGHT">
<Default>right</Default>
</Parameter>

<Parameter name="DIRECTIONuFINDuLEFT">
<Default>left</Default>
</Parameter>

<Method name="createFrom">
<ClassMethod>1</ClassMethod>
<FormalSpec>internalName:%String</FormalSpec>
<ReturnType>%SourceControl.Automation.AutomatizeTest</ReturnType>
<Implementation><![CDATA[    quit ..%New( internalName )
]]></Implementation>
</Method>

<Method name="create">
<ClassMethod>1</ClassMethod>
<ReturnType>%SourceControl.Automation.AutomatizeTest</ReturnType>
<Implementation><![CDATA[    quit ..%New("")
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>className:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (..isTestable(className)){        
        set ..classNameComplete = className
        do ..registerPackage(className)
        do ..registerClassName(className)
        do ..registerPackageTest()
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="isTestable">
<FormalSpec>className:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ( $listFind(..#FILEuTESTABLE, ##class(AutomatizeUtil).getExtension(className) ) > 0)
]]></Implementation>
</Method>

<Method name="isManagerExist">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ##class(AutomatizeUtil).isClassCompiled("%SourceControl.Automation.Test.Agent")
]]></Implementation>
</Method>

<Method name="isPrefixTestExist">
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ($extract(className,1,4)="Test")
]]></Implementation>
</Method>

<Method name="registerClassName">
<FormalSpec>className:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim size As %Integer = $length(className,".")    
    #dim class = ##class(AutomatizeUtil).getNameFileNotExtensionAndPackages(className)
    
    if (..isPrefixTestExist(class)){
        set ..className = class
    } else {
        set ..className = $$$FormatText("%1%2","Test",class)
    }
]]></Implementation>
</Method>

<Method name="registerPackage">
<FormalSpec>className:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim size As %Integer = $length(className,".") 
    set ..package = $piece(className,".",1,(size-2)) // 2 - Extension and class name.
    quit $$$OK
]]></Implementation>
</Method>

<Method name="registerPackageTest">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..mountPackageTest()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="mountPackageTest">
<FormalSpec>direction:%String=..#DIRECTIONuFINDuRIGHT</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim position As %Integer
    #dim packageFinded = ""
    #dim map As %String = ""
    
    do ##class(%SourceControl.Automation.Test.RegisterPackageTest).registerPackageTest( .map )    
    set:(direction=..#DIRECTIONuFINDuRIGHT) packageFinded = ..findPackageLeftToRight(.map)
    set:(direction=..#DIRECTIONuFINDuLEFT) packageFinded = ..findPackageRightToLeft(.map)
    
    if (packageFinded'=""){        
        set ..packageTest = $replace(..package,..packageReplace,packageFinded)
    } else {
        set ..packageTest = $replace(..package,"test.","")
    }
    
    do ..isExistClassTestMoutaded(direction)
]]></Implementation>
</Method>

<Method name="findPackageLeftToRight">
<FormalSpec><![CDATA[&map]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
    #dim packageFinded,findPack = ""
    #dim position As %Integer
    #dim size As %Integer = $length(..package,".")
    for position=1:1 {                
        quit:(position>size)        
        set findPack = $piece(..package,".",1,position)        
        quit:(findPack="")
        
        set packageFinded = $get(map(findPack))
        quit:(packageFinded'="")
    }
        
    set ..packageReplace = findPack
    quit packageFinded
]]></Implementation>
</Method>

<Method name="findPackageRightToLeft">
<FormalSpec><![CDATA[&map]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
    #dim packageFinded,findPack = ""
    #dim position As %Integer
    #dim size As %Integer = $length(..package,".")
    for position=0:1 {                
        quit:(position>size)
        
        set findPack = $piece(..package,".",1,(size-position))
        quit:(findPack="")
        
        set packageFinded = $get(map(findPack))
        quit:(packageFinded'="")
    }
        
    set ..packageReplace = findPack
    quit packageFinded
]]></Implementation>
</Method>

<Method name="isExistClassTestMoutaded">
<FormalSpec>direction:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
    do ..registerNameClassTest()
    if ('..isClassCompiled(..classNameTest) && (direction=..#DIRECTIONuFINDuRIGHT)){
        do ..mountPackageTest(..#DIRECTIONuFINDuLEFT)
    }
]]></Implementation>
</Method>

<Method name="registerNameClassTest">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (..packageTest '= ""){
        set ..classNameTest = $$$FormatText("%1.%2.%3",..#PACKAGEuTEST,..packageTest,..className)
    } else {
        set ..classNameTest = $$$FormatText("%1.%2",..#PACKAGEuTEST,..className)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="isClassCompiled">
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ##class(AutomatizeUtil).isClassCompiled(className)
]]></Implementation>
</Method>

<Method name="run">
<FormalSpec>method:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (..isManagerExist()){
         if (..isClassCompiled(..classNameTest)){ 
            do ..registerLastTest()            
            do:(method'="") $classMethod("%SourceControl.Automation.Test.Agent","run",..classNameTest,method)
            do:(method="") $classMethod("%SourceControl.Automation.Test.Agent","run",..classNameTest)
         } else {
             if (..isTestable(..classNameComplete)){
                write !,$$$Text("@Test.SemClasseDeTeste@[TesteUnitário] - Esta classe não possui uma classe de teste.","%Studio.Tools")
             }
         }
    } else {
        write !,$$$Text("@Test.SemClasseAgent@[TesteUnitário] - Não existe a classe '%SourceControl.Automation.Test.Agent' para rodar os testes.","%Studio.Tools")
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="runAllSuite">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (..isManagerExist()){
            do $classMethod("%SourceControl.Automation.Test.Agent","run")
    } else {
        write !,$$$Text("@Test.SemClasseAgent@[TesteUnitário] - Não existe a classe '%SourceControl.Automation.Test.Agent' para rodar os testes.","%Studio.Tools")
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="runPackage">
<FormalSpec>package:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (..isManagerExist()){
            do $classMethod("%SourceControl.Automation.Test.Agent","run", package)
    } else {
        write !,$$$Text("@Test.SemClasseAgent@[TesteUnitário] - Não existe a classe '%SourceControl.Automation.Test.Agent' para rodar os testes.","%Studio.Tools")
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="runLastTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim lastTest As %String = ..getLastTest()
    if (lastTest '= ""){
        do $classMethod("%SourceControl.Automation.Test.Agent","run",lastTest)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="isRunTest">
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    if (..isManagerExist() && ..isTestable(..classNameComplete) && ..isClassCompiled(..classNameTest)){
         quit $$$YES
    }
    quit $$$NO
]]></Implementation>
</Method>

<Method name="getClassTest">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..classNameTest
]]></Implementation>
</Method>

<Method name="registerLastTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    do ..setStorageValue("UnitTest-LastTest", $namespace, ..classNameTest )
    quit $$$OK
]]></Implementation>
</Method>

<Method name="getLastTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..getStorageValue("UnitTest-LastTest", $namespace )
]]></Implementation>
</Method>

<Method name="showMessageEncourageTest">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if ('..isRunTest()){
        write !,$$$Text("@Test.AlertSemClasseTeste@[TesteUnitário] - Automatize seus testes, crie uma classe de teste.","%Studio.Tools")
    } else {
         if (+##class(%SourceControl.OptionState).getOption("%TestAutomatic")=$$$NO){                        
            write !,$$$FormatText($$$Text("@Test.IncentivarRodarTeste@[TesteUnitário] - Esta classe possuí testes, execute-os sempre que fizer uma alteração pelo terminal usando: do ##class(%SourceControl.Automation.Test.Agent).run(""%1"")","%Studio.Tools"),..classNameTest)
         }
    }
]]></Implementation>
</Method>

<Method name="clearResult">
<Implementation><![CDATA[
     if (..isManagerExist()){
        do ##class(%SourceControl.Automation.Test.Agent).clearResult()
     }
]]></Implementation>
</Method>

<Method name="clearPopulate">
<Implementation><![CDATA[
     if (..isManagerExist()){
        do ##class(%SourceControl.Automation.Test.Agent).clearPopulate()
     }
]]></Implementation>
</Method>

<Method name="autoTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (+##class(%SourceControl.OptionState).getOption("%TestAutomatic")=$$$YES){
        do ..run()
    }
    do ..showMessageEncourageTest()
    quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
