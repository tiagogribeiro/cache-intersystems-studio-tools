<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%SourceControl.Automation.Test.Agent">
<Super>%RegisteredObject,%SourceControl.Automation.AutomatizeStorage</Super>
<TimeCreated>63973,40417.786247</TimeCreated>

<Parameter name="PACKAGEuDEFAULT">
<Final>1</Final>
<Default>test</Default>
</Parameter>

<Method name="clear">
<ClassMethod>1</ClassMethod>
<FormalSpec>force:%Boolean=0</FormalSpec>
<ReturnType>%SourceControl.Automation.Test.Agent</ReturnType>
<Implementation><![CDATA[
    #dim currentNamespace as %String = $namespace
    
    do ..changeNamespaceForTest()
    do ##class(test.util.PopulateTools).purgeDados( force )
    do ..backToTheCurrentNamespace(currentNamespace)
    
    quit ..%New()
]]></Implementation>
</Method>

<Method name="run">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String=..#PACKAGEuDEFAULT,method:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim return as %Status
    #dim currentNamespace as %String = $namespace
    
    write !,$$$FormatText($$$Text( "@ExecutandoTeste@Executando teste para: %1", "%Studio.Tools"), file)
    
    do ..changeNamespaceForTest()
    
    if (..isTestClass(file)) {
        set return = ..runTestByClass(file, method, currentNamespace)
    } else {
        set return = ..runTestByPack(file)
    }
    
    job ..notifyIntregations(file, method)::0
    do ..backToTheCurrentNamespace(currentNamespace)
    
    quit return
]]></Implementation>
</Method>

<Method name="changeNamespaceForTest">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
    #dim namespaceAllow As %String
     
     set namespaceAllow = ..getStorageValue("UnitTest","namespace",$namespace)
     if (namespaceAllow=""){
        set namespaceAllow = ..getStorageValue("UnitTest","namespace")
     }
    
    write !,$$$FormatText($$$Text( "@NamespaceAtual@Namespace atual: %1", "%Studio.Tools"), $namespace )
    
    if (namespaceAllow '=""){
        zn namespaceAllow
        write !,$$$FormatText($$$Text( "@AlterandoNamespaceTeste@Alterado namespace atual para namespace de teste: %1", "%Studio.Tools"), $namespace )
    } else {
        write !,$$$Text( "@ConfigNamespaceTesteNaoExiste@Não existe um namespace de teste configurado, por favor configure executando: 'do ##class(%SourceControl.Instalation.Manager).install()' no seu namespace de trabalho.", "%Studio.Tools")
    }
]]></Implementation>
</Method>

<Method name="backToTheCurrentNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespaceWork:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
    if (namespaceWork '= $namespace) {
        znspace namespaceWork
        write !,$$$FormatText($$$Text( "@RetornandoNamespaceAtual@Retornado ao namespace atual: %1", "%Studio.Tools"), $namespace )
    }
]]></Implementation>
</Method>

<Method name="isTestClass">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String=..#PACKAGEuDEFAULT</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #dim pieceList, lastPiece as %String = ""
    
    set pieceList = $listFromString(file, ".")
    set lastPiece = $listGet(pieceList, $listLength(pieceList))
    
    quit ($extract(lastPiece, 1, 4) = "Test")
]]></Implementation>
</Method>

<Method name="isNamespaceIsNamespaceRoutines">
<ClassMethod>1</ClassMethod>
<FormalSpec>currentNamespace</FormalSpec>
<Implementation><![CDATA[
    #dim test,current As %String
    
    set test = $ZConvert(##class(%SourceControl.Automation.AutomatizeUtil).getNamespaceRoutines($namespace),"U")
    set current = $zConvert(currentNamespace,"U")
    quit (test = current)
]]></Implementation>
</Method>

<Method name="runTestByClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>testCase,method="",currentNamespace</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (..isNamespaceIsNamespaceRoutines(currentNamespace)){
        quit ##class(Manager).DebugRunTestCase("", testCase,"",method)
    } else {
        write !,$$$FormatText($$$Text( "@ValidaAmbienteTesteRotinas@A configuração de 'rotinas' do namespace %1, deve ser configurada para utilizar as 'rotinas' do namespace %2, para que os testes possam rodar.", "%Studio.Tools"), $namespace, currentNamespace)
        quit $$$OK
    }
]]></Implementation>
</Method>

<Method name="runTestByPack">
<ClassMethod>1</ClassMethod>
<FormalSpec>package:%String=..#PACKAGEuDEFAULT</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #dim fileName As %String = $get(^UnitTestRoot)_"\PackageTests.xml"
   
   do $SYSTEM.OBJ.ExportPackage( package, fileName )
   quit ##class(Manager).RunTest(,"/nodelete")
]]></Implementation>
</Method>

<Method name="clearResult">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    #dim namespace As %String = $namespace
    do ..changeNamespaceForTest()
    do ##class(Manager).PurgeResult()
    do ..backToTheCurrentNamespace(namespace)
]]></Implementation>
</Method>

<Method name="clearPopulate">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    #dim namespace As %String = $namespace
    do ..changeNamespaceForTest()
    do $classmethod("test.util.PopulateTools","purgeDados")
    do ..backToTheCurrentNamespace(namespace)
]]></Implementation>
</Method>

<Method name="notifyIntregations">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%String,method:%String</FormalSpec>
<Implementation><![CDATA[
    if ($namespace '= "CI"){    
        if (##class(%SourceControl.Automation.AutomatizeUtil).isClassCompiled("%SourceControl.Automation.Integration.Slack")){        
            do ##class(%SourceControl.Automation.Integration.Slack).notify( file )
        }
    }
]]></Implementation>
</Method>
</Class>
</Export>
