<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%SourceControl.Git.Utils">
<Abstract>1</Abstract>
<IncludeCode>%occStatus,%occErrors</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<TimeCreated>62657,53384.637236</TimeCreated>

<Parameter name="Storage">
<Default>^Git</Default>
</Parameter>

<Parameter name="InstallNamespace">
<Default>%SYS</Default>
</Parameter>

<Parameter name="Slash">
<Expression>$case($system.Version.GetOS(),"Windows":"\",:"/")</Expression>
</Parameter>

<Parameter name="SCListFilename">
<Description>
Name of the file with version controlled items</Description>
<Default>sc-list.txt</Default>
</Parameter>

<Parameter name="GitMenuItems">
<Default>,%Settings,%Commit,%Pull,%Fetch,%Switch,%Merge,%Push,%Diff,%RepoStatus,%Resolve,%Revert,%Log,%StashSave,%StashPop,</Default>
</Parameter>

<Parameter name="ImportAfterGitMenuItems">
<Default>,%Clone,%Commit,%Pull,%Fetch,%Push,%Resolve,%StashPop,</Default>
</Parameter>

<Parameter name="GitContextMenuItems">
<Default>,%Diff,%Blame,</Default>
</Parameter>

<Method name="InstallNamespaceStorage">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$Replace(..#Storage,"^","^["""_..#InstallNamespace_"""]")
]]></Implementation>
</Method>

<Method name="DefaultTemp">
<Description>
Returns root temp folder</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$Get(@..InstallNamespaceStorage()@("%defaultTemp"), "c:\temp\")
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// 8012 because this error has corresponding error message

]]></Content>
</UDLText>

<Method name="MakeError">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>msg:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[$$$ERROR(8012,"Git",msg)
]]></Implementation>
</Method>

<Method name="TempFolder">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$Get(@..#Storage@("settings","namespaceTemp"),..DefaultTemp()_$Translate($znspace,"%")_..#Slash)
]]></Implementation>
</Method>

<Method name="GroupByFolder">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$Get(@..#Storage@("settings","groupByFolder"), 0)
]]></Implementation>
</Method>

<Method name="MappingsNode">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$Name(@..#Storage@("settings","mappings"))
]]></Implementation>
</Method>

<Method name="GitBinExists">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #if $system.Version.GetOS()'="Windows" 
     quit 0
    #else 
    if '$Data(@..InstallNamespaceStorage()@("%gitBinExists")) {
        set @..InstallNamespaceStorage()@("%gitBinExists") = ##class(%File).Exists($Extract(..GitBinPath(),2,*-1))
    }
    quit @..InstallNamespaceStorage()@("%gitBinExists")
    #endif
]]></Implementation>
</Method>

<Method name="GitBinPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set binPath = $Get(@..InstallNamespaceStorage()@("%gitBinPath"))
    quit $case($Extract(binPath),"""":binPath,:""""_binPath_"""")
]]></Implementation>
</Method>

<Method name="NeedSettings">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[(..DefaultTemp() = "") ||  (..GitBinPath() = "") ||  (..GitBinPath() = """")
]]></Implementation>
</Method>

<Method name="InstallNamespace">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..#InstallNamespace
]]></Implementation>
</Method>

<Method name="AddSlash">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if path'="" && ($Extract(path,*)'=..#Slash) {
        set path = path_..#Slash
    }
    quit path
]]></Implementation>
</Method>

<Method name="UpdateSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&settings]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // we change ^STORAGE to ^["InstallNamespace"]|STORAGE, so we store path to git.exe in one place
    set @..InstallNamespaceStorage()@("%gitBinPath") = settings("gitBinPath")
    kill @..InstallNamespaceStorage()@("%gitBinExists")
    
    // let's add slash in the end
    set @..InstallNamespaceStorage()@("%defaultTemp") = ..AddSlash(settings("defaultTemp"))
    
    set @..#Storage@("settings","namespaceTemp") = ..AddSlash(settings("namespaceTemp"))
    set @..#Storage@("settings","groupByFolder") = $case(settings("groupByFolder"), "":"", :1)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GitCommand">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>commandName:%String,itemName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
..GitBinPath()_" /command:"_commandName_
               " /path:"""_..TempFolder()_
               $case(itemName,"":"",:..ExternalName(itemName))_""""_
               $case(commandName,"clone":" /exactpath:"_..TempFolder(),:"")
]]></Implementation>
</Method>

<Method name="IsMenuGitCommand">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>menuItemName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$Find(..#GitMenuItems, ","_menuItemName_",") > 0
]]></Implementation>
</Method>

<Method name="IsContextMenuGitCommand">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>menuItemName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$Find(..#GitContextMenuItems, ","_menuItemName_",") > 0
]]></Implementation>
</Method>

<Method name="IsImportAfter">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>menuItemName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$Find(..#ImportAfterGitMenuItems, ","_menuItemName_",") > 0
]]></Implementation>
</Method>

<Method name="UserAction">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[InternalName:%String,MenuName:%String,&Target:%String,&Action:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define Force 1
    #dim menuName As %String = $Piece(MenuName,",")
    #dim menuItemName As %String = $Piece(MenuName,",",2)
    #dim ec As %Status = $$$OK
    
    if ..GitBinExists() = 0 && (menuItemName'="%Cache-Git-Settings") && 
            ($system.Version.GetOS()="Windows") {
        write !!,"===Path to tortoisegitproc.exe not found: "_..GitBinPath()_"!===",!
    }
    
    if (menuName = "%SourceMenu") {
        if (menuItemName = "%Cache-Git-Settings") {
            set Action = 2
            set Target = ##class(%cspapp.gitprojectsettings).%GetParameter("CSPURL")_"?NSpace="_$znspace_"&Username="_$username
        }elseif (menuItemName = "%CreateRepo") {
            if ##class(%File).CreateDirectoryChain(..TempFolder()) {
                // cleanup items info
                kill @..#Storage@("items")
                kill @..#Storage@("TSH")
                set Action = 3
                set Target = ..GitCommand("repocreate")
            } else {
                set ec = ..MakeError("Unable to create folder "_..TempFolder())
            }
        }elseif (menuItemName = "%Export") || (menuItemName = "%ExportForce") {
            write "==export start==",!
            set ec = ..ExportAll($case(menuItemName="%ExportForce",1:$$$Force,:0))
            if ec {
                write !,"==export done==",!
            }
        }elseif (menuItemName = "%Import") {
            set ec = ..ImportAll()
            set Reload = 1
        }elseif (menuItemName = "%ImportForce") {
            set ec = ..ImportAll($$$Force)
            set Reload = 1
        }elseif (menuItemName = "%Clone") {
            if ##class(%File).CreateDirectoryChain(..TempFolder()) {
                // cleanup items info
                kill @..#Storage@("items")
                kill @..#Storage@("TSH")
                set Action = 3
                set Target = ..GitCommand("clone", "")
            } else {
                set ec = ..MakeError("Unable to create folder "_..TempFolder())
            }
        }elseif (menuItemName = "%OpenRepoFolder") {
            set Action = 3
            set Target = ..TempFolder()
        }elseif ..IsMenuGitCommand(menuItemName) {
                set Action = 3
                #dim command As %String = $ZConvert($Extract(menuItemName, 2, *), "L")
                set ec = $$$OK
                if $Data(@..#Storage@("settings","hook"),hook)=1 {
                    set $ListBuild(class,method) = hook
                    set ec = $classmethod(class, method, command, InternalName)
                }
                if $$$ISOK(ec) {
                    set Target = ..GitCommand(command)
                }
        }
    }elseif (menuName = "%SourceMenuContext") {
        
        if (..Type(InternalName) = "csp") && ($Extract(InternalName,1) '= "/") {
            set InternalName = "/" _ InternalName
        }
        
        if (menuItemName = "%AddToSC") {
            set ec = ..AddToSourceControl(InternalName)
        }elseif (menuItemName = "%RemoveFromSC") {
            set ec = ..RemoveFromSourceControl(InternalName)
        }
        if ..IsContextMenuGitCommand(menuItemName) {
            set Action = 3
            set command = $ZConvert($Extract(menuItemName, 2, *), "L")
            set Target = ..GitCommand(command, InternalName)
        }
    }
    if ..IsImportAfter(menuItemName) && (Action = 3) {
        write "Choose Import All menu after work with Git!", !
    }
    //w Target,!
    quit ec
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $$$OK
]]></Implementation>
</Method>

<Method name="IsNamespaceInGit">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[##class(%File).Exists(..TempFolder()_".git")
]]></Implementation>
</Method>

<Method name="NormalizeFolder">
<Description><![CDATA[
replaces any slashes with the ones for current OS<br/>
removes first slash if present<br/>
adds last slash if not present<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folder:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set folder = $Translate(folder, "/", ..#Slash)
    set:$Extract(folder)=..#Slash $Extract(folder) = ""
    set:$Extract(folder,*)'=..#Slash folder = folder _ ..#Slash
    quit folder
]]></Implementation>
</Method>

<Method name="ExternalName">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set name = $Translate(InternalName, "/", ..#Slash)

    // lower case for extensions
    #dim extension As %String = $ZConvert($Piece(name,".",$Length(name,".")),"L")
    set $Piece(name,".",$Length(name,".")) = extension
    
    #dim groupByFolder As %Boolean = ..GroupByFolder()
    // we shall put classes in different folders
    if extension = "cls" {
        set name = $Translate( $Piece(name,".", 1, $Length(name,".")-1), ".", ..#Slash)_".cls"
    } elseif groupByFolder {
        // If groupByFolder = 1 then we put inc, mac, int in corresponding folder, not in root.
        // For example project.include.inc will be placed in project\include.inc.xml
        set sep = $Case(extension, "dfi" : "-", : ".")
        set name = $Translate($Piece(name,".", 1, $Length(name,".")-1), sep, ..#Slash)_"." _ extension
    }
        
    // we shall delete csp-app from csp files
    if $Extract(name, 1) = ..#Slash {
        set $Extract(name, 1) = ""
    }
    if $Piece(name, ..#Slash, 1) = "csp" {
        set $Piece(name, ..#Slash, 1, 2) = "csp"
    }

    set mappings = $Data(@..MappingsNode(), rootFolder)
    
    if mappings#10 = 1 { // value in root
        set rootFolder = ..NormalizeFolder(rootFolder)
    }
    
    if mappings >= 10 { //values in leaves
        set type = ..Type(InternalName)
        
        if $Data(@..MappingsNode()@(type), folder) {
            set folder = ..NormalizeFolder(folder)
        }
    }
    
    set name = $Get(rootFolder) _ $Get(folder) _ name
    
    // write "name=",name,!
    // write "external name = ", $Translate(name," *?","___")_".xml", !
    quit $Translate(name," *?","___")_".xml"
]]></Implementation>
</Method>

<Method name="AddToSourceControl">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim i As %Integer
    #dim ec As %Status = $$$OK
    for i = 1:1:$Length(InternalName, ",") {
        #dim item As %String = ..NormalizeExtension($Piece(InternalName, ",", i))
        set @..#Storage@("items", item) = ""
        #dim sc As %Status =  ..ExportItem(item)
        if 'sc {
            set ec = $$$ADDSC(ec, sc)
        }
    }
    set ec = $$$ADDSC(ec, ..ExportSCList())
    quit ec
]]></Implementation>
</Method>

<Method name="DeleteExternalsForItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim type As %String = ..Type(InternalName)
    #dim ec As %Status = $$$OK
    if (type = "prj") || (type = "pkg") || (type = "csp" && ..IsCspFolder(InternalName)) {
        // we delete complex items
        
        //get all item in files
        #dim itemsList
        $$$QuitOnError(..ListItemsInFiles(.itemsList))
        
        #dim item As %String = ""
        //for all item in files
        for  {
            set item = $Order(itemsList(item))
            quit:item=""
            
            //if item is not in sc -- delete file
            if '..IsInSourceControl(item) {
                #dim sc As %Status = ..DeleteExternalFile(item)
                if 'sc {
                    set ec = $$$ADDSC(ec, sc)
                }
            }
        }
    } else {
        set ec = ..DeleteExternalFile(InternalName)
    }
    quit ec
]]></Implementation>
</Method>

<Method name="RemoveFromSourceControl">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim sc As %Status = $$$OK
    
    if $Data(@..#Storage@("items", ..NormalizeExtension(InternalName))) {
        set InternalName = ..NormalizeExtension(InternalName)
    }
    
    if $Data(@..#Storage@("items", InternalName)) {
        kill @..#Storage@("items", InternalName)
        set sc = ..DeleteExternalsForItem(InternalName)
        do ..RemoveFolderIfEmpty(..TempFolder())
        set sc = $$$ADDSC(sc, ..ExportSCList())
    } else {
        #dim parentElement As %String = ""
        if ..IsInSourceControl(InternalName, .parentElement) {
            set sc = ..MakeError("This element is contained in "_parentElement_" that tracked by SourceControl")
        }else {
            set sc = ..MakeError("Element is not in SourceControl")
        }
        
    }
    quit sc
]]></Implementation>
</Method>

<Method name="IsCspFolder">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #dim extension = $Piece(InternalName, ".", $Length(InternalName, "."))
    quit:extension="csp" 0
    
    #dim filename = $system.CSP.GetFileName(InternalName_"/")
    if filename = "" && ($Extract(InternalName,1) '= "/") {
        set filename = $system.CSP.GetFileName("/"_InternalName_"/")
    }
    quit filename'="" && ##class(%File).DirectoryExists(filename)
]]></Implementation>
</Method>

<Method name="Type">
<Description><![CDATA[
pkg -- package<br/>
prj -- project<br/>
csp -- csp-page or csp-folder. See <Method>IsCspFolder</Method><br/>
csp -- any static file from csp-folder ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim extension As %String = $ZConvert($Piece(InternalName,".",$Length(InternalName,".")),"L")
    #dim type As %String = extension
    
    if ($Extract(InternalName, 1, 4) = "/csp") 
          || ($Find(InternalName,".") = 0) 
          || ($Find(InternalName,"/") > 0) {
              //we need to double-check
              //Sometimes (see NormalizeInternalName) Studio passes routine names as /Package/SubPackage/Routine.mac
              //Generally speaking this can be static file
              if (type = "mac") || (type = "inc") || (type = "int") {
                  #dim filename = $system.CSP.GetFileName(InternalName)
                  if ##class(%File).Exists(filename) {
                      set type = "csp"
                  }
              } else {
                    set type ="csp"
              }
    }
   
    quit type
]]></Implementation>
</Method>

<Method name="NameWithoutExtension">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$Piece(InternalName, ".", 1, $Length(InternalName,".")-1)
]]></Implementation>
</Method>

<Method name="IsClassInPackage">
<Description>
packageName without extension</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>ClassName:%String,packageName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$Extract(ClassName, 1, $Length(packageName)) = packageName
]]></Implementation>
</Method>

<Method name="IsItemInProject">
<Description>
projectName without extension</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String,projectName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    // we should check two cases
    // direct inclusion
    // inclusion in package or csp-folder that contained in project
    #dim type As %String = ..Type(InternalName)
    //w InternalName, "->"
    #dim name As %String = $case(type, "cls": ..NameWithoutExtension(InternalName), 
                                       "pkg": $Translate(..NameWithoutExtension(InternalName), "/", "."), 
                                       "csp": $Extract(InternalName, 2, *),
                                       :InternalName)
    if $Extract(name) = "." && (type = "pkg") {
        set $Extract(name) = ""
    }
    
    //w name, " "
    #dim checkId = projectName_"||"_name_"||"_$ZConvert(type,"U")
    //w checkId
    #dim isItemInProject As %Boolean = ##class(%Studio.ProjectItem).%ExistsId(checkId)
    //w " ", isItemInProject, !
    
    #dim i As %Integer
    if 'isItemInProject && ((type = "cls") || (type="pkg")) {
        for i = 1:1:$Length(name, ".") {
            set checkId = projectName_"||"_$Piece(name, ".", 1, i)_"||PKG"
            //w checkId, !
            if ##class(%Studio.ProjectItem).%ExistsId(checkId) {
                set isItemInProject = 1
                quit
            }
        }
    }
    
    if 'isItemInProject && (type = "csp") {
        for i = 1:1:$Length(name, "/") {
            set checkId = projectName_"||"_$Piece(name, "/", 1, i)_"||DIR"
            
            if ##class(%Studio.ProjectItem).%ExistsId(checkId) {
                set isItemInProject = 1
                quit
            }
        }
    }
    quit isItemInProject
]]></Implementation>
</Method>

<Method name="IsItemInCSPFolder">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>InternalName:%String,cspFolder:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[$Extract(InternalName, 1, $Length(cspFolder)) = cspFolder
]]></Implementation>
</Method>

<Method name="FindInPackages">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[InternalName:%String,&sourceControlItem:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #dim item As %String = ""
    #dim found As %Boolean = 0
    for  {
        set item = $Order(@..#Storage@("items", item))
        quit:item=""
        continue:..Type(item)'="pkg"
        #dim packageName As %String = ..NameWithoutExtension(item)

        if ..IsClassInPackage(InternalName, packageName) {
            set found = 1
            set sourceControlItem = packageName
            quit
        }
    }
    quit found
]]></Implementation>
</Method>

<Method name="FindInProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[InternalName:%String,&sourceControlItem:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #dim item As %String = ""
    #dim found As %Boolean = 0
    for  {
        set item = $Order(@..#Storage@("items", item))
        quit:item=""
        continue:..Type(item)'="prj"
        #dim projectName As %String = ..NameWithoutExtension(item)
        
        if ..IsItemInProject(InternalName, projectName) {
            set found = 1
            set sourceControlItem = projectName
            quit
        }
    }
    quit found
]]></Implementation>
</Method>

<Method name="FindInCspFolders">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[InternalName:%String,&sourceControlItem:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #dim cspFolder As %String = ""
    #dim found As %Boolean = 0
    for  {
        set cspFolder = $Order(@..#Storage@("items", cspFolder))
        quit:cspFolder=""
        //no need to check IsCspFolder. It might not exist yet
        //continue:'(..Type(cspFolder)="csp" && ..IsCspFolder(cspFolder))
        continue:'(..Type(cspFolder)="csp")


        
        if ..IsItemInCSPFolder(InternalName, cspFolder) {
            set found = 1
            set sourceControlItem = cspFolder
            quit 
        }
    }
    quit found
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[InternalName:%String,&sourceControlItem:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim isInSourceControl As %Boolean = 1
    
    if $Data(@..#Storage@("items", ..NormalizeExtension(InternalName))) {
        set InternalName = ..NormalizeExtension(InternalName)
    }
    
    set isInSourceControl = $Data(@..#Storage@("items", InternalName)) > 0
    if isInSourceControl {
        set sourceControlItem = InternalName
    }else {
        //if no direct reference maybe we have to look in packages, projects or csp-apps ?
        //We have three groups of routines
        //packages for classes
        //projects for everything
        //csp-folders for csp and static files

        #dim type As %String = ..Type(InternalName)
        if type = "cls" {
            #define StripExtension(%s) $Piece(%s,".",1,$Length(%s, ".") - 1)
            if InternalName'="" && ($$$defClassKeyGet($$$StripExtension(InternalName),$$$cCLASSgeneratedby)'="") {
                set isInSourceControl = 0 // skip generated classes
            } else {
                set isInSourceControl = ..FindInPackages(InternalName, .sourceControlItem)
            }
        } elseif type = "csp" {
            if $Extract(InternalName) '= "/" {
                set InternalName = "/" _ InternalName
            }
            set isInSourceControl = ..FindInCspFolders(InternalName, .sourceControlItem)
        }
        
        // our last chance to find item -- let's look in projects
        if 'isInSourceControl {
            set isInSourceControl = ..FindInProjects(InternalName, .sourceControlItem)
        }
    }
    //w "checking ", $G(type), " ", InternalName, "=", isInSourceControl, !
    quit isInSourceControl
]]></Implementation>
</Method>

<Method name="FullExternalName">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TempFolder()_..ExternalName(InternalName)
]]></Implementation>
</Method>

<Method name="NormalizeInternalName">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    //Studio passes name of routine with dots as it is in folders
    //e.g. Package.SubPackage.Routine.mac has InternalName =  /Package/SubPackage/Routine.mac
    //This happens if right-click in Workspace -> Namespace
    //If right-click in Workspace -> Project then everything passes ok
    //let's fix this
    if $Extract(name) '= "/" {
        quit name
    }
    
    set type = ..Type(name)
    
    if (type = "inc") || (type = "mac") || (type = "int") {
        set name = $Extract($Translate(name, "/", "."), 2, *)
    }
    quit name
]]></Implementation>
</Method>

<Method name="NormalizeExtension">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim extension = $Piece(name, ".", $Length(name, "."))
    if $Length(extension) <= 3 {
        set $Piece(name, ".", $Length(name, ".")) = $ZConvert(extension, "L")
    }
    quit name
]]></Implementation>
</Method>

<Method name="RoutineTSH">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
       
    #dim type = ..Type(InternalName)
    
    //for csp-files (csp,js,html,css, all that stored in csp/...) we always check for changes in external file
    // Tiago G. Ribeiro.
    //#dim tsh = $case(type,"csp":"",:$Get(@..#Storage@("TSH", ..NormalizeExtension(InternalName))))
    #dim tsh = $Get(@..#Storage@("TSH", ..NormalizeExtension(InternalName)))    
    
    if tsh = "" {
        #dim ts As %String = ##class(%RoutineMgr).TS(InternalName)
        if ts '= "" {
            // prj files have milliseconds in timestamp, so we crop them
            set tsh = $Piece($ZDateTimeH(ts, 3),".",1)
        } else {
            set tsh = "1840-12-31 00:00:00"
        }
    }
    
    quit tsh
]]></Implementation>
</Method>

<Method name="UpdateRoutineTSH">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String,tsh:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set @..#Storage@("TSH", ..NormalizeExtension(InternalName)) = $Get(tsh, $Horolog)
    quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveRoutineTSH">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    kill @..#Storage@("TSH", ..NormalizeExtension(InternalName))
    quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteExternalFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim fullName = ##class(Utils).FullExternalName(InternalName)
    #dim ec As %Status = $$$OK
    if ##class(%File).Exists(fullName) {
        set ec = ##class(%File).Delete(fullName)
        do ..RemoveRoutineTSH(InternalName)
        write fullName, " for ", InternalName, " deleted",!
    }
    Quit ec
]]></Implementation>
</Method>

<Method name="GetTempFileAndRoutineTS">
<Description>
if temp file for InternalName not found return "0,0" in tempFileTSH</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[InternalName:%String,&tempFileTSH:%String,&routineTSH:%String]]></FormalSpec>
<Implementation><![CDATA[
    #dim filename As %String = ..FullExternalName(InternalName)
    set tempFileTSH = ##class(%File).GetFileDateModified(filename)
    set routineTSH = ..RoutineTSH(InternalName)
    //file not found or path not found or some other error
    set:tempFileTSH<0 tempFileTSH = "0,0"
    set tempFileTSH = $zdatetime(tempFileTSH,3)
    set routineTSH = $zdatetime(routineTSH,3)
]]></Implementation>
</Method>

<Method name="IsTempFileOutdated">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    do ..GetTempFileAndRoutineTS(InternalName,.tempFileTSH,.routineTSH)
    quit routineTSH]tempFileTSH
]]></Implementation>
</Method>

<Method name="IsRoutineOutdated">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    do ..GetTempFileAndRoutineTS(InternalName,.tempFileTSH,.routineTSH)       
    quit (tempFileTSH]routineTSH)
]]></Implementation>
</Method>

<Method name="FixProjectCspReferences">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim loadedProject As %String = $Piece(projectName, ".", 1)
    // now we should fix reference to csp pages in project items
    // that is: if project was exported from USER and imported in SAMPLES
    // then all reference to csp/user/page.csp should be changed to csp/samples/page.csp
    #dim item As %String =""
    #dim oldCspApp As %String = ""
    #dim newCspApp As %String = ""
    for  {
        set item = $Order(^oddPROJECT(loadedProject,"Items",item))
        quit:item=""
        set type = $Order(^oddPROJECT(loadedProject,"Items",item,""))
        if type = "CSP" || (type = "DIR") {
            #dim newitem As %String = item
            set $Piece(newitem,"/",1,2) = $Extract($system.CSP.GetDefaultApp($znspace),2,*)
            if newitem '= item {
                set ^oddPROJECT(loadedProject,"Items",newitem,type) = ^oddPROJECT(loadedProject,"Items",item,type)
                kill ^oddPROJECT(loadedProject,"Items",item,type)
                set newCspApp = $Extract($system.CSP.GetDefaultApp($znspace),2,*)
                set oldCspApp = $Piece(item,"/",1,2)
            }
        }
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ImportItem">
<Description><![CDATA[
imports file if version in system is newer then version on disk.
if <var>force</var> = 1 then imports in any case.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String,force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //WRITE "Before Load Of: ", InternalName, " ", ..IsInSourceControl(InternalName), !
    //q:'..IsInSourceControl(InternalName) $$$OK
    #dim filename As %String = ..FullExternalName(InternalName)
    #dim fileTSH = ##class(%File).GetFileDateModified(filename)
    #dim sc As %Status = $$$OK
    
    if ..IsRoutineOutdated(InternalName) || force {
        set sc = $system.OBJ.Load(filename,"-l-d")
        
        ; Tiago G. Ribeiro
        do ..RenameClass(sc, filename, InternalName)
        
        if sc {            
            set sc = ..UpdateRoutineTSH(InternalName, fileTSH)
            if ..Type(InternalName) = "prj" {
                set sc = $$$ADDSC(sc, ..FixProjectCspReferences(InternalName))
            }
            write InternalName," has been imported from ", filename,!            
            do ##class(AutomatizeCompilation).add( InternalName ) // Tiago G. Ribeiro
        } else {
            write "ERROR importing" ,InternalName,!
            do $system.Status.DisplayError(sc)
        }
    } else {
        ;write InternalName, " is the same as on-disk version or newer, skipping import",!
    }
    Quit sc
]]></Implementation>
</Method>

<Method name="RenameClass">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sc,filename:%String,InternalName:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    ; Tiago G. Ribeiro - Quando a classe é alterada o nome gera um erro
    ; 6301 dizendo que já existe a classe, então eu excluo ela e re-importo.
    if ( $System.Status.GetErrorCodes(sc) = 6301){                       
        write !,"Rename classe: "_InternalName
        set statusDelete = $system.OBJ.Delete(InternalName)
        if ($$$ISOK(statusDelete)){
            set sc = $system.OBJ.Load(filename,"-l-d")                
        } else {
            write !,"Failed to delete class "_InternalName_" to reimport"
        }
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ListItemsInFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&itemList,&err]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define DoNotLoad 1
    set res = $system.OBJ.ImportDir(..TempFolder(),"*.xml","-d",.err,1, .itemList, $$$DoNotLoad)
    
    if '$Data(itemList) && $$$ISERR(res) {
        quit res
    }
    
    if $Get(err) > 0 {
        write "There were some errors while importing files",!
        for i=1:1:err {
            write err(i),!
        }
    }
    
    //change all csp/ names to /csp/ names
    #dim item As %String = "csp"
    for  {
        set item = $Order(itemList(item))
        quit:item=""
        quit:$Extract(item, 1, 4)'="csp/"
        kill itemList(item)
        set itemList("/"_item)=""
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ImportRoutines">
<ClassMethod>1</ClassMethod>
<FormalSpec>force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    write "==import start==", !
    
    #dim err, itemList
    
    kill err, itemList
    set err = 0   
    
    #dim ec As %Status = ..ListItemsInFiles(.itemList, .err)
    quit:'ec ec
    
    #dim internalName As %String = ""
    for  {
        set internalName = $Order(itemList(internalName))
        quit:internalName=""
        if '..IsInSourceControl(internalName) {
            //w "item ",internalName," is not in source control, skipping",!
            continue
        }
        #dim sc As %Status = ..ImportItem(internalName, force)
        if $$$ISERR(sc) {
            set ec = $$$ADDSC(ec, sc)
        }
    }
    
    //let's delete all items for which corresponding files had been deleted
    #dim item as %String = ""
    for  {
        set item = $Order(@..#Storage@("TSH", item))
        quit:item=""

        if '##class(%File).Exists(..FullExternalName(item)) {
            #dim type As %String = ..Type(item)
            #dim name As %String = ..NameWithoutExtension(item)
            #dim deleted As %Boolean = 1
            if type = "prj" {
                set ec = $$$ADDSC(ec, $system.OBJ.DeleteProject(name))
            }elseif type = "cls" {
                set ec = $$$ADDSC(ec, $system.OBJ.Delete(item))
            }elseif $ListFind($ListBuild("mac","int","inc","bas","mvb","mvi","dfi"), type) > 0 {
                set ec = $$$ADDSC(ec, ##class(%Routine).Delete(item))
            }elseif type = "csp" {
                #dim filename = $system.CSP.GetFileName(item)
                if ##class(%File).Exists(filename) && '##class(%File).Delete(filename) {
                    set ec = $$$ADDSC(ec, ..MakeError("Error while removing "_item))
                }
            } else {
                set deleted = 0
            }
            
            if deleted && ec {
                do ..RemoveRoutineTSH(item)
                write item, " was deleted", !
            } else {
                if +$system.Status.GetErrorCodes(ec) '= $$$ClassDoesNotExist {
                    write "Error: could not delete ", item, !
                } else {
                    // if something we wanted to delete is already deleted -- good!
                    do ..RemoveRoutineTSH(item) // Tiago G. Ribeiro
                    set ec = $$$OK
                }
            }
        }
    }
    
    write "==import done==", !
    quit ec
]]></Implementation>
</Method>

<Method name="ExportRoutinesAux">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,sep:%String="",level:%Integer=0,force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define Dir
    #define OrderBy
    #define SystemFiles
    #define Flat
    #define NotStudio
    #define ShowGenerated 0
    #define Filter
    #define CspFile 5
    #define Directory 9
    #define CSPFolder 10
    
    #dim rs As %ResultSet = ##class(%ResultSet).%New("%RoutineMgr:StudioOpenDialog")
    #dim ec As %Status = rs.Execute(path_$case(path,"":"",:"/")_"*",$$$Dir, $$$OrderBy, $$$SystemFiles, $$$Flat, $$$NotStudio, $$$ShowGenerated, $$$Filter)
    quit:'ec ec
    while rs.Next() {
        #dim name As %String = rs.Get("Name")
        #dim isdirectory As %String = rs.Get("IsDirectory")
        #dim type As %String = rs.Get("Type")
        
        if (type = $$$Directory) || (type = $$$CSPFolder) {
            #dim newpath As %String = $case(path,"":name,:path_isdirectory_name)
            do ..ExportRoutinesAux(newpath, isdirectory, level + 1, force)
        } else {
            #dim InternalName As %String = path_sep_name
            if (type = $$$CspFile) && ($Extract(InternalName) '= "/") {
                set InternalName = "/"_InternalName
            }
            set ec = ..ExportItem(InternalName, 1, force)
        }
    }
    kill rs
    quit ec
]]></Implementation>
</Method>

<Method name="ExportItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>InternalName:%String,expand:%Boolean=1,force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim type = ..Type(InternalName)
    //write "checking if we should export "_InternalName,!
    if type = "pkg" {
        $$$QuitOnError(..ExportRoutinesAux(..NameWithoutExtension(InternalName), ".", 0, force))
    }elseif type = "prj" && expand {
        $$$QuitOnError(..ExportProject(..NameWithoutExtension(InternalName), force))
        $$$QuitOnError(..ExportItem(InternalName, 0, force))
    }elseif (type = "csp") && ..IsCspFolder(InternalName) {
        $$$QuitOnError(..ExportRoutinesAux(InternalName , "/", 0, force))
    }else {
        if ..IsTempFileOutdated(InternalName) || force {
            
            #dim filename As %String = ..FullExternalName(InternalName)
            write "exporting new version of ", InternalName, " to ", filename,!
            $$$QuitOnError($system.OBJ.Export(InternalName, filename,"-d/diff"))
            $$$QuitOnError(..UpdateRoutineTSH(InternalName, $Horolog))
        } else {
            write !,InternalName, " is not newer than on-disk version, skipping export"
        }
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>project:%String,force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim rs As %ResultSet = ##class(%ResultSet).%New("%Studio.Project:ProjectItemsList")
    $$$QuitOnError(rs.Execute(project))
    #dim typesWithoutExtension As %List = $ListBuild("CLS", "PKG")
    while rs.Next() {
        #dim name = rs.Get("Name")
        if $ListFind(typesWithoutExtension, rs.Get("Type")) {
            set name = name _ "." _ rs.Get("Type")
        }
        #dim ec As %Status = ..ExportItem(name, 1, force)
        quit:'ec
    }
    kill rs
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportAll">
<Description><![CDATA[
if <var>force</var> = 1 then we export item even if timestamp in system is older]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    $$$QuitOnError(..ExportRoutines(force))
    quit ..ExportSCList()
]]></Implementation>
</Method>

<Method name="ImportAll">
<Description><![CDATA[
if <var>force</var> = 1 then we import item even if timestamp in system is newer]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status
    $$$QuitOnError(..ImportSCList())
    do ##class(AutomatizeCompilation).clear() // Tiago G. Ribeiro
    set status = ..ImportRoutines(force)
    do ##class(AutomatizeCompilation).compile() // Tiago G. Ribeiro
    quit status
]]></Implementation>
</Method>

<Method name="ExportRoutines">
<ClassMethod>1</ClassMethod>
<FormalSpec>force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim item As %String = ""
    #dim ec As %Status = $$$OK
    for  {
        set item = $Order(@..#Storage@("items",item))
        quit:item=""
        set ec = ..ExportItem(item, 1, force)
        quit:'ec       
    }
    quit ec
]]></Implementation>
</Method>

<Method name="ExportSCList">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim filename = ..TempFolder()_..#SCListFilename    
    #dim file As %File = ##class(%File).%New(filename)
    #dim item As %String = ""
    #dim defaultCspApp As %String = $system.CSP.GetDefaultApp($znspace)
    $$$QuitOnError(file.Open("WSN"))
    
    for  {
        set item = $Order(@..#Storage@("items",item))
        quit:item=""
        #dim fixedItem As %String = item
        if $Extract(fixedItem, 1, $Length(defaultCspApp)) = defaultCspApp {
            set $Extract(fixedItem, 1, $Length(defaultCspApp)) = "<cspapp>"
        }
        
        do file.WriteLine(fixedItem)
        
    }
    $$$QuitOnError(file.%Save())
    do file.Close()
    kill file
    quit $$$OK
]]></Implementation>
</Method>

<Method name="ImportSCList">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim filename = ..TempFolder()_..#SCListFilename
    #dim file As %File = ##class(%File).%New(filename)
    #dim defaultCspApp As %String = $system.CSP.GetDefaultApp($znspace)
    #dim eol As %Boolean
    
    $$$QuitOnError(file.Open("R", 10))
    
    #dim a 
    while 'file.AtEnd  {
        #dim s As %String = file.ReadLine(,,.eol)
        continue:s=""
        #dim item As %String = $Replace(s, "<cspapp>", defaultCspApp)
        set a(..NormalizeExtension(item)) = ""
    }
    kill @..#Storage("items")
    merge @..#Storage("items") = a
    do file.Close()
    kill file
    quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveFolderIfEmpty">
<Description>
returns true if directory was deleted</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    #dim rs As %ResultSet = ##class(%ResultSet).%New("%File:FileSet")
    #define DirsFirst 1
    $$$QuitOnError(rs.Execute(path,,,$$$DirsFirst))
    #dim fileCount As %Integer = 0
    while rs.Next() {
        #dim fullname As %String = rs.Get("Name")
        #dim type As %String = rs.Get("Type")
        #dim name As %String = rs.Get("ItemName")
        #define IsDirectory(%type) %type="D"
        
        set fileCount = fileCount + 1
        quit:'$$$IsDirectory(type)
        continue:name=".git"
        if ..RemoveFolderIfEmpty(fullname) {
            set fileCount = fileCount - 1
        }
    }
    if fileCount = 0 {
        do ##class(%File).RemoveDirectory(path)
    }
    kill rs
    quit 'fileCount
]]></Implementation>
</Method>
</Class>
</Export>
