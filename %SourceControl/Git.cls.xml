<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%SourceControl.Git">
<Import>%SourceControl.Git</Import>
<Super>%Studio.Extension.Base</Super>
<TimeCreated>62655,58027.787011</TimeCreated>

<XData name="Menu">
<Data><![CDATA[
<MenuBase>
<Menu Name="%SourceMenu" Type="0">
<MenuItem Name="%Cache-Git-Settings" />
<MenuItem Name="%Settings" />
<MenuItem Name="%CreateRepo" Save = "001"/>
<MenuItem Name="%Clone" Save = "001"/>
<MenuItem Name="%Commit" Save = "001"/>
<MenuItem Separator="true"/>
<MenuItem Name="%Pull" Save = "001"/>
<MenuItem Name="%Fetch" Save = "001"/>
<MenuItem Name="%Switch" Save = "001"/>
<MenuItem Name="%Merge" Save = "001"/>
<MenuItem Name="%Push" Save = "001"/>
<MenuItem Separator="true"/>
<MenuItem Name="%Diff" Save = "001"/>
<MenuItem Name="%RepoStatus" Save = "001"/>
<MenuItem Name="%Resolve" Save = "001"/>
<MenuItem Name="%Revert" Save = "001"/>
<MenuItem Name="%Log" Save = "001"/>
<MenuItem Separator="true"/>
<MenuItem Name="%StashSave" Save = "001"/>
<MenuItem Name="%StashPop" Save = "001"/>
<MenuItem Separator="true"/>
<MenuItem Name="%Export" Save = "001" />
<MenuItem Name="%ExportForce" Save = "001" />
<MenuItem Name="%Import" Save = "001" />
<MenuItem Name="%ImportForce" Save = "001" />
<MenuItem Separator="true"/>
<MenuItem Name="%OpenRepoFolder" Save = "001" />
</Menu>
<Menu Name="%TestUnitario" Type="0">
<MenuItem Name="%TestCreateClass" />
<MenuItem Name="%TestOpenClassTest" />
<MenuItem Separator="true"/>
<MenuItem Name="%TestAllClass" />
<MenuItem Name="%TestClass" />
<MenuItem Name="%TestLastTest" />
<MenuItem Separator="true"/>
<MenuItem Name="%TestClearResult" />
<MenuItem Name="%TestClearPopulate" />
<MenuItem Separator="true"/>
<MenuItem Name="%TestAutomaticOn" />
<MenuItem Name="%TestAutomaticOff" />
</Menu>
<Menu Name="%SourceMenuContext" Type="1">
<MenuItem Name="%AddToSC"/>
<MenuItem Name="%RemoveFromSC"/>
<MenuItem Name="%Diff" Save = "001"/>
<MenuItem Name="%Blame" Save = "001"/>
</Menu>
<Menu Name="%TestUnitarioContext" Type="1">
<MenuItem Name="%TestClass" />
<MenuItem Name="%TestAndCompile" />
<MenuItem Name="%TestPackage" />
<MenuItem Separator="true"/>
<MenuItem Name="%TestOpenClassTest" />
</Menu>

</MenuBase>
]]></Data>
</XData>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    ; Tiago G. Ribeiro
    try {
        if ('##class(ActionMenu).execute(Name, InternalName, SelectedText, .Target, .Action)){
            #dim ec As %Status = $$$OK
            #dim menu As %Status = $Piece(Name, ",", 1)
            if menu '= "%SourceMenu", menu'="%SourceMenuContext" {
                return $$$OK
            }
            set InternalName = ##class(Utils).NormalizeInternalName(InternalName)
            set ec = ##class(Utils).UserAction(InternalName, Name, .Target, .Action, .Reload)
            return ec
        } else {
            return $$$OK
        }
    } catch e {
        W e.DisplayString()
    }
]]></Implementation>
</Method>

<Method name="OnSourceMenuItem">
<FormalSpec><![CDATA[name:%String,&Enabled:%String,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    if name = "%Cache-Git-Settings" {
        // We always show Settings
        set DisplayName = "Settings"
        quit $$$OK
    } 
    if name = "%Settings" && ##class(Utils).GitBinExists() {
        set DisplayName = "TortoiseGit Settings"
        quit $$$OK
    }
    
    if ##class(Utils).NeedSettings() {
        set Enabled = -1
        quit $$$OK
    }
    if ##class(Utils).IsNamespaceInGit() {
        if name = "%Export" {
            set DisplayName = "Export All"
        } elseif name="%ExportForce" {
            set DisplayName = "Export All Force"
        } elseif name = "%Import" {
            set DisplayName = "Import All"
        } elseif name = "%ImportForce" {
            set DisplayName = "Import All Force"
        }elseif name = "%RepoStatus" && ##class(Utils).GitBinExists() {
            set DisplayName = "Check for modifications"
        }elseif name = "%OpenRepoFolder" {
            set DisplayName = "Open Repo Folder"
        }
        elseif ##class(Utils).IsMenuGitCommand(name) && ##class(Utils).GitBinExists() {
            set DisplayName = $case(name,"%StashSave":"Stash save",
                                         "%StashPop":"Stash pop",
                                         :$Extract(name, 2, *))
        } 
        else {
            set Enabled = -1
        }
    } elseif ##class(Utils).GitBinExists() { 
        if name = "%CreateRepo" {
            set DisplayName = "Create Repo"
        } elseif name = "%Clone" {
            set DisplayName = "Clone"
        } else {
            set Enabled = -1
        }
    } else {
        set Enabled = -1 
    }
        
    quit $$$OK
]]></Implementation>
</Method>

<Method name="OnSourceMenuContextItem">
<FormalSpec><![CDATA[itemName:%String,menuItemName:%String,&Enabled:%String,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set:menuItemName="%AddToSC" DisplayName = "Add to SourceControl"
    set:menuItemName="%RemoveFromSC" DisplayName = "Remove from SourceControl"
    
    if (itemName = "") || '##class(Utils).IsNamespaceInGit() {
        set Enabled = -1
    }elseif ##class(Utils).IsInSourceControl(##class(Utils).NormalizeInternalName(itemName)) {
        set Enabled = $Case(menuItemName, "%AddToSC":-1,:1)
    } else {
        set Enabled = $Case(menuItemName, "%AddToSC":1,:-1)
    }
        
    quit $$$OK
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<Description><![CDATA[
This is called for every menu item returned to Studio to allow the menu to be enabled/disabled without
having to write a custom query for <query>MenuItems</query>. The <var>DisplayName</var> of this menu is
also passed by reference and this may be modified to change the appearance of this menu item. The <var>MenuName</var>
is the main menu name then the submenu name separated by a ','. If <var>Enabled</var> is set to -1 then it will remove
this menu item from the list totally, 0 will gray the menu item out and the default 1 will display the menu item as normal.]]></Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim menu As %String= $Piece(MenuName,",")
    #dim name As %String = $Piece(MenuName,",",2)
    if menu = "%SourceMenuContext", name = "" {
        set DisplayName = "Git"
    }
    if menu = "%SourceMenu", name = "" {
        set DisplayName = "Git"
    }
    #dim ec As %Status = $$$OK

    if menu = "%SourceMenu" {
        set ec = ..OnSourceMenuItem(name, .Enabled, .DisplayName)
    }elseif menu = "%SourceMenuContext" {
        set ec = ..OnSourceMenuContextItem(InternalName, name, .Enabled, .DisplayName)
    }
    
    ; Tiago G. Ribeiro
    do ##class(TranslateMenu).translate( MenuName, .DisplayName )
    do ##class(ActionMenuStatus).active( MenuName, InternalName, .Enabled, .DisplayName, SelectedText )
        
    Quit ec
]]></Implementation>
</Method>

<Method name="OnBeforeLoad">
<Description>
This is called before the actual load of data to give the chance
to load the item from an external format.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set InternalName = ##class(Utils).NormalizeInternalName(InternalName)
    if ##class(Utils).IsInSourceControl(InternalName) {
        quit ##class(Utils).ImportItem(InternalName)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
This is called after the item has been saved to the database.
It may be passed a reference to the object representing the item
just saved. It can be use to export this documement to an external form for example.</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set InternalName = ##class(Utils).NormalizeInternalName(InternalName)
    if ##class(Utils).IsNamespaceInGit() && ..IsInSourceControl(InternalName) {
        $$$QuitOnError(##class(Utils).RemoveRoutineTSH(InternalName))
        quit ##class(Utils).ExportItem(InternalName)
    } else {
        quit $$$OK
    }
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
Called after the compile of the item is done.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = ..OnAfterSave(InternalName)
    do ##class(%SourceControl.Automation.AutomatizeTest).%New(InternalName).autoTest()
    quit status
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<Description>
Returns true if this item is in source control and false otherwise.</Description>
<CodeMode>expression</CodeMode>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[InternalName'="" && ##class(Utils).IsInSourceControl(##class(Utils).NormalizeInternalName(InternalName))
]]></Implementation>
</Method>

<Method name="OnAfterDelete">
<Description>
Called after an item is deleted.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set InternalName = ##class(Utils).NormalizeInternalName(InternalName)
    if ##class(Utils).IsInSourceControl(InternalName) {
        quit ##class(Utils).DeleteExternalFile(InternalName)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeTimestamp">
<Description>
Called before Studio checks for the timestamp of an item.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<Implementation><![CDATA[
    ; Desabilitado pois ao importar um arquivo não estava deixando o arquivo importado
    ; e sempre reimportando o do disco.
    ;do ##class(Utils).ImportItem(InternalName)
    do ##class(%SourceControl.Instalation.Manager).install()
    Quit
]]></Implementation>
</Method>

<Method name="ItemIconState">
<Description><![CDATA[
Used to allow Studio to display different icons in open dialog or project window etc.
Return values are:<ul>
<li>0 - Not in source control</li>
<li>1 - In source control, not checked out</li>
<li>2 - In source control and checked out so item is editable</li></ul>]]></Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set automation = ##class(%SourceControl.Automation.AutomatizeTest).%New(InternalName)
    if (automation.isRunTest() && 'automation.isClassTest()){
        return 2
    }
    Quit 0
]]></Implementation>
</Method>

<Property name="IconStatus">
<Description><![CDATA[
Can be set to determine if we wish to report the source control status of the document in the project window
or in the open dialog. This property should be set when the source control class is initialized.
As this can be a large number of callbacks the default is not to call the
<method>ItemIconState</method> method at all. Do not enable this unless the information needed is available
directly in Cache or the performance will be too slow. Values are:<ul>
<li>0 - Disabled</li>
<li>1 - Use <method>ItemIconState</method> callback in project window</li>
<li>2 - Use <method>ItemIconState</method> callback in open dialog window (and namespace window)</li>
<li>3 - Use <method>ItemIconState</method> callback everywhere</li></ul>]]></Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="GetStatus">
<Description>
Return information about this entity.</Description>
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&UserCheckedOut:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    #dim isTest As %Boolean
    set automation = ##class(%SourceControl.Automation.AutomatizeTest).%New(InternalName)
    set isTest = (automation.isRunTest() && 'automation.isClassTest())
    
    set Editable=1
    set IsCheckedOut=isTest
    set UserCheckedOut=""
    set IsInSourceControl=isTest
    Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
